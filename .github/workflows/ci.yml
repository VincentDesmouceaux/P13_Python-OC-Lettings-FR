# .github/workflows/ci.yml
name: CI – tests, build, deploy

###############################################################################
# Déclencheurs
###############################################################################
on:
  push:           # commit direct
    branches: ['**']          # tests sur toutes les branches
  pull_request:               # tests sur toutes les PR
  workflow_dispatch:          # déclenchement manuel

###############################################################################
# Variables globales (AUCUN secret en clair)
###############################################################################
env:
  IMAGE_NAME:  ${{ secrets.DOCKERHUB_USERNAME }}/oc-lettings-site
  PY_VER:      '3.12'

###############################################################################
# 1) Lint + tests – TOUJOURS
###############################################################################
jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install, lint, test
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt flake8 pytest-cov
          flake8 .
          pytest --cov=. --cov-report=xml --cov-fail-under=80

###############################################################################
# 2) Build & push Docker – UNIQUEMENT sur master si tests OK
###############################################################################
  docker:
    needs: test
    if: github.ref == 'refs/heads/master' && needs.test.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write     # pour pouvoir pousser sur Docker Hub

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3           # émulation ARM
      - uses: docker/setup-buildx-action@v3         # builder multi-arch
        with:
          driver: docker-container

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push (linux/amd64 + linux/arm64)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to:   type=gha,mode=max

###############################################################################
# 3) Déploiement Northflank – seulement si build OK
###############################################################################
  deploy:
    needs: docker
    if: needs.docker.result == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Trigger redeploy on Northflank
        env:
          NF_API_TOKEN:  ${{ secrets.NORTHFLANK_TOKEN }}
          NF_PROJECT:    ${{ secrets.NORTHFLANK_PROJECT }}   # Doit être le slug du projet
          NF_SERVICE:    ${{ secrets.NORTHFLANK_SERVICE }}   # Doit être le slug du service
          IMAGE_TAG:     latest
        run: |
          set -euo pipefail
          # Utiliser les endpoints 'by-slug' dans l'URL
          curl -sSf -X POST \
            "https://api.northflank.com/v1/projects/by-slug/${NF_PROJECT}/services/by-slug/${NF_SERVICE}/deployments" \
            -H "Authorization: Bearer ${NF_API_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{\"image\": {\"tag\": \"${IMAGE_TAG}\"}, \"reason\": \"GitHub Action auto-deploy\"}"