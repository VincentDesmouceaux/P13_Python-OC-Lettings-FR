# .github/workflows/ci.yml
name: CI – lint, tests, build & deploy

###############################################################################
# Déclencheurs
###############################################################################
on:
  push:
    branches: ["**"]          # toutes les branches
  pull_request:
  workflow_dispatch:

###############################################################################
# Variables globales
###############################################################################
env:
  PY_VER: "3.12"
  DOCKER_REPO: vincentdesmouceaux/oc-lettings-site
  NF_PROJECT: vintedbackendtestone      # slug Northflank
  NF_SERVICE: holiday-homes             # slug Northflank
  IMAGE_TAG: latest                     # tag déployé

###############################################################################
jobs:
###############################################################################

# ───────────────────────────── 1. TESTS ────────────────────────────────────
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps, lint & tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt flake8 pytest-cov
          flake8 .
          pytest --cov=. \
                 --cov-report=xml \
                 --cov-report=term-missing \
                 --cov-fail-under=80

# ────────────────────── 2. BUILD & PUSH (master/main) ──────────────────────
  docker:
    needs: test
    if: >
      needs.test.result == 'success' &&
      (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      # multi-arch : QEMU + Buildx
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      # login Docker Hub
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push (amd64 + arm64)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_REPO }}:${{ github.sha }}
          build-args: GIT_SHA=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false               # manifest plus léger

# ───────────────────────── 3. DEPLOY NORTHFLANK ────────────────────────────
  deploy:
    needs: docker
    if: needs.docker.result == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Trigger redeploy on Northflank
        env:
          NF_API_TOKEN: ${{ secrets.NORTHFLANK_TOKEN }}
          DOCKER_REPO:  ${{ env.DOCKER_REPO }}
          IMAGE_TAG:    ${{ env.IMAGE_TAG }}
          NF_PROJECT:   ${{ env.NF_PROJECT }}
          NF_SERVICE:   ${{ env.NF_SERVICE }}
        run: |
          set -euo pipefail
          echo "💡 Déploiement Northflank : ${NF_PROJECT}/${NF_SERVICE} → ${DOCKER_REPO}:${IMAGE_TAG}"

          # chemin « slug » ✅
          endpoint="https://api.northflank.com/v1/projects/bySlug/${NF_PROJECT}/services/bySlug/${NF_SERVICE}/deploy"

          # appel verbeux → on garde la sortie pour debug
          resp=$(curl -sS -X POST "${endpoint}" \
                    -H "Authorization: Bearer ${NF_API_TOKEN}" \
                    -H "Content-Type: application/json" \
                    -d '{"image":{"repository":"'"${DOCKER_REPO}"'","tag":"'"${IMAGE_TAG}"'"},"reason":"GitHub Action auto-deploy"}' \
                    -w '\nHTTP_CODE:%{http_code}')

          http_code=$(echo "$resp" | sed -n 's/^HTTP_CODE://p')
          body=$(echo "$resp" | sed '/^HTTP_CODE:/d')

          echo "↪︎ Northflank HTTP $http_code"
          echo "$body"

          # échoue le job si KO
          if [[ "$http_code" != "200" && "$http_code" != "202" ]]; then
            echo "❌ Northflank deploy failed" >&2
            exit 1
          fi

