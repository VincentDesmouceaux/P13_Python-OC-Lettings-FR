# .github/workflows/ci.yml
name: CI – lint, tests, build & deploy

on:
  push:
    branches: ['**']
  pull_request: {}
  workflow_dispatch: {}

##############################################################################
# 0 · Variables globales accessibles dans tout le workflow
##############################################################################
env:
  PY_VER: ${{ secrets.PY_VER }}

jobs:
  ##########################################################################
  # 1 · TESTS
  ##########################################################################
  test:
    runs-on: ubuntu-latest
    env:
      PY_VER: ${{ secrets.PY_VER }}
      DJANGO_SECRET_KEY: ci-dummy-secret
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Install deps, lint & tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt flake8 pytest-cov
          flake8 .
          pytest --cov=. --cov-fail-under=80

  ##########################################################################
  # 2 · BUILD & PUSH (master/main uniquement) + RELEASE SENTRY
  ##########################################################################
  docker:
    needs: test
    if: |
      needs.test.result == 'success' &&
      (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      DOCKER_REPO: ${{ secrets.DOCKER_REPO }}
      IMAGE_TAG:  ${{ secrets.IMAGE_TAG }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0            # nécessaire pour set_commits:auto

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push (amd64 + arm64)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_REPO }}:${{ github.sha }}
          build-args: |
            GIT_SHA=${{ github.sha }}
          cache-from: type=gha
          cache-to:   type=gha,mode=max
          provenance: false

      # ─────────────────────────────────────────────
      #  ➜ Notification de release à Sentry Cloud EU
      # ─────────────────────────────────────────────
      - name: Notify Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG:        ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT:    ${{ secrets.SENTRY_PROJECT }}
          SENTRY_URL:        ${{ secrets.SENTRY_URL }} 
        with:
          environment: production
          version:      ${{ github.sha }}
          projects:     "${{ secrets.SENTRY_PROJECT }}"
          set_commits:  auto
          ignore_missing: true

  ##########################################################################
  # 3 · DEPLOY NORTHFLANK  (service Combined → /build)
  ##########################################################################
  deploy:
    needs: docker
    if: needs.docker.result == 'success'
    runs-on: ubuntu-latest
    env:
      NF_TOKEN:      ${{ secrets.NORTHFLANK_TOKEN }}
      NF_PROJECT_ID: ${{ secrets.NF_PROJECT_ID }}
      NF_OBJECT_ID:  ${{ secrets.NF_OBJECT_ID }}
    steps:
      - name: Trigger Northflank build
        continue-on-error: true
        run: |
          set -euo pipefail
          API="https://api.northflank.com/v1/projects/${NF_PROJECT_ID}/services/${NF_OBJECT_ID}/build"
          echo "🔗  POST $API"
          http=$(curl -sS -o /tmp/resp.json -w '%{http_code}' \
            -X POST "$API" \
            -H "Authorization: Bearer ${NF_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '{"reason":"GitHub Action auto-build"}')
          echo "↪︎ HTTP ${http}"
          cat /tmp/resp.json || true
          if [[ "$http" =~ ^2[0-9]{2}$ ]]; then
            echo "✅ Build déclenché – suivez-le sur Northflank."
          else
            echo "⚠️  Build NON déclenché (HTTP $http) – workflow poursuivi."
          fi

      - name: Final notice
        run: echo "🌐 Si build OK → https://p01--holiday-homes--c7br8w6v87r6.code.run"
