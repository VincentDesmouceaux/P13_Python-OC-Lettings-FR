# .github/workflows/ci.yml
name: CI – tests, lint, build & push

###############################################################################
# Déclencheurs
###############################################################################
on:
  push:
    branches: ["*"]
  pull_request:
  workflow_dispatch:

###############################################################################
# Variables globales (jamais de secrets en clair)
###############################################################################
env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/oc-lettings-site

###############################################################################
# 1) Lint + tests Python
###############################################################################
jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: install-lint-test
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt flake8 pytest-cov
          flake8 .
          pytest --cov=. --cov-report=xml --cov-fail-under=80

###############################################################################
# 2) Build multi-arch & push sur Docker Hub
###############################################################################
  docker:
    needs: test            # ← n’exécute que si « test » passe
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      # 1️⃣  QEMU : émulation ARM pour le build multi-arch
      - name: setup-qemu
        uses: docker/setup-qemu-action@v3

      # 2️⃣  Buildx dédié en mode « docker-container » (multi-platform OK)
      - name: setup-buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container          # indispensable pour linux/arm64
          buildkitd-flags: --debug

      # 3️⃣  Login Docker Hub
      - name: login-dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4️⃣  Build & push
      - name: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64   # ← image multi-arch
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha                  # accélère les rebuilds
          cache-to: type=gha,mode=max
