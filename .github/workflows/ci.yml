# .github/workflows/ci.yml
name: CI ‚Äì lint, tests, build & deploy

##############################################################################
# D√©clencheurs
##############################################################################
on:
  push:            { branches: ['**'] }
  pull_request:
  workflow_dispatch:

##############################################################################
# Variables ‚Äúpubliques‚Äù (tout le reste vient des secrets)
##############################################################################
env:
  PY_VER: ${{ secrets.PY_VER }}          # ex. 3.12

##############################################################################
jobs:
##############################################################################

# ---------------------------------------------------------------------------
# 1 ¬∑ TESTS
# ---------------------------------------------------------------------------
  test:
    runs-on: ubuntu-latest
    env:
      PY_VER:            ${{ secrets.PY_VER }}
      DJANGO_SECRET_KEY: ci-dummy-secret      # cl√© factice pour la phase tests
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Install deps, lint & tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt flake8 pytest-cov
          flake8 .
          pytest --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=80

# ---------------------------------------------------------------------------
# 2 ¬∑ BUILD & PUSH  (seulement sur master/main)
# ---------------------------------------------------------------------------
  docker:
    needs: test
    if: >
      needs.test.result == 'success' &&
      (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    permissions: { contents: read, packages: write }
    env:
      DOCKER_REPO: ${{ secrets.DOCKER_REPO }}      # ex. vincentdesmouceaux/oc-lettings-site
      IMAGE_TAG:  ${{ secrets.IMAGE_TAG }}         # ex. latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3          # multi-arch
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push image (amd64 + arm64)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_REPO }}:${{ github.sha }}
          build-args: |
            GIT_SHA=${{ github.sha }}
            COLLECTSTATIC=1
          cache-from: type=gha
          cache-to:   type=gha,mode=max
          provenance: false          # manifest plus l√©ger

# ---------------------------------------------------------------------------
# 3 ¬∑ DEPLOY NORTHFLANK  (service ‚ÄúDeployment‚Äù)
# ---------------------------------------------------------------------------
  deploy:
    needs: docker
    if: needs.docker.result == 'success'
    runs-on: ubuntu-latest
    env:
      NF_API_TOKEN: ${{ secrets.NORTHFLANK_TOKEN }}   # PAT Northflank (X-NF-API-KEY)
      NF_TEAM:      ${{ secrets.NF_TEAM }}            # slug team   (ex. desmontvincent)
      NF_PROJECT:   ${{ secrets.NF_PROJECT }}         # slug projet (ex. vintedbackendtestone)
      NF_SERVICE:   ${{ secrets.NF_SERVICE }}         # slug service(ex. holiday-homes)
    steps:
      - name: Trigger redeploy on Northflank
        run: |
          set -euo pipefail

          ENDPOINT="https://api.northflank.com/v1/teams/${NF_TEAM}/projects/${NF_PROJECT}/services/${NF_SERVICE}/deploy"

          echo "üí°  Endpoint: $ENDPOINT"
          echo "üîÑ D√©clenchement du redeploy pour ${NF_TEAM}/${NF_PROJECT}/${NF_SERVICE} ..."

          # Appel ‚Äî pas besoin de corps JSON pour un service Deployment
          HTTP_CODE=$(curl -sS -o /tmp/resp.json -w '%{http_code}' \
            -X POST "$ENDPOINT" \
            -H "X-NF-API-KEY: ${NF_API_TOKEN}" \
            -H "Content-Type: application/json")

          cat /tmp/resp.json || true
          echo "‚Ü™Ô∏é HTTP $HTTP_CODE"

          if [[ "$HTTP_CODE" =~ ^2[0-9]{2}$ ]]; then
              echo "‚úÖ Redeploy lanc√© avec succ√®s."
          else
              echo "‚ùå √âchec du redeploy."
              exit 1
          fi
